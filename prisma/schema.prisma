generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // ← pooler (PgBouncer, 6543)
  directUrl = env("DIRECT_URL") // ← directo (5432) para migraciones
}

// === Enums ===
enum ProductQuality {
  FAN
  PLAYER_VERSION
}

enum KitType {
  HOME
  AWAY
  THIRD
  RETRO
}

// Transacciones financieras (ingresos/egresos)
enum TransactionType {
  INCOME
  EXPENSE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      String   @default("user") // "user" | "seller" | "admin"
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]

  Order Order[]

  Transaction Transaction[]
}

model Product {
  id             String           @id @default(cuid())
  title          String
  description    String?
  basePrice      Int // ← antes era price
  purchasePrice  Int? // precio de compra (opcional)
  imageUrl       String
  imagePublicId  String?
  // Metadatos:
  seasonLabel    String?
  seasonStart    Int?
  kit            KitType?
  quality        ProductQuality?
  league         String?
  purchaseUrl    String? // link de compra (opcional)
  // Instagram:
  instagramPostId String? // ID del post en Instagram
  // Relación:
  ProductVariant ProductVariant[]
  ProductImage   ProductImage[]
  ownerId        String
  owner          User             @relation(fields: [ownerId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  OrderItem      OrderItem[]

  @@index([seasonStart])
  @@index([kit])
  @@index([quality])
  @@index([league])
}

model ProductImage {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl      String
  imagePublicId String?
  order         Int      @default(0) // para ordenar las imágenes
  createdAt     DateTime @default(now())

  @@index([productId])
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String // "S","M","L" o "Única"
  sku       String?  @unique
  stock     Int      @default(0)
  price     Int? // override opcional de basePrice
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, name]) // evita talles duplicados
  @@index([productId])
}

model Order {
  id       String  @id @default(cuid())
  userId   String?
  user     User?   @relation(fields: [userId], references: [id])
  status   String  @default("pending") // pending | paid | canceled
  name     String
  phone    String
  address  String
  notes    String?
  subtotal Int // en Gs (sin decimales)
  lat      Float?
  lng      Float?

  // --- Personalización a nivel Orden ---
  customName   String?
  customNumber Int?
  hasPatch     Boolean @default(false)

  // --- Total final del pedido (subtotal + extras) ---
  totalPrice Int

  createdAt DateTime    @default(now())
  items     OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  variantId String?
  title     String
  price     Int // precio unitario en Gs
  quantity  Int
  imageUrl  String
}

// === Finanzas ===
model Transaction {
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  type         TransactionType
  amount       Int             // monto en Gs (positivo). El tipo define ingreso/egreso
  description  String?
  category     String?         // opcional: etiqueta libre ("proveedor", "envío", etc.)
  occurredAt   DateTime        @default(now()) // fecha efectiva del movimiento
  createdAt    DateTime        @default(now())
  // Imágenes asociadas (opcional, similar a ProductImage)
  TransactionImage TransactionImage[]

  @@index([userId, occurredAt])
  @@index([type])
}

model TransactionImage {
  id            String       @id @default(cuid())
  transactionId String
  transaction   Transaction  @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  imageUrl      String
  imagePublicId String?
  order         Int          @default(0)
  createdAt     DateTime     @default(now())

  @@index([transactionId])
}
